# 内置名称空间：里面存储，input,print,len等内置函数
# 名称空间：命名空间
# 全局名称空间会寻找关键字，然后进行调用，将其调用出来。
# a = 1
# b = 2
# def func(): # 函数不会运行，会存在一个地址中，通过下面进行调用，关键字就是func
#     print(666)
# c = 3
# print(id(func()))

# 临时名称空间，当开始调用函数时，会开辟临时名称空间，里面存储函数里面的变量与相对于的值，然后进行调用临时名称空间
# 函数调用结束就会消失，不会同时出现两个临时名称空间（除非函数里面还有一个函数），一个结束就会消失，然后新的重新开辟
# a = 1
# b = 2
# def func():
#     f = 666
#     print(f)
# c = 3
# print(id(func()))
# python 分为三种空间：内置名称空间，全局名称空间，临时名称空间（局部名称空间）。
# 加载顺序：内置名称空间——> 全集名称空间 ——> 局部名称空间（函数执行时）
# 取值顺序：（就近原则）
# input = 'abc'
# def func():
#     input = 'cba'
#     print(input)
# func()

# 局部名称空间 --> 全局名称空间 --> 内置名称空间
# 先找局部，找到直接调用，没用找全局，找到直接调用，还没有，在找内置
# 单向不可逆，
# input = 'abc'
# def func():
#     input = 'cba'
# print(input) # 在这个时候还未调用函数，因此找不到临时，所以直接跳过临时
# func()

# 作用域：
# 两个作用域：
    # 全局作用域：内置,全局名称空间
    # 局部作用域：局部名称空间
# 局部作用域可以引用全局,全局不能引用局部
# date = 'abc'
# def func1():
#     print(date)
#    func2 = cba
# print(func2)
# func1()
# 可以引用，不能修改
# func3 = 1
# def ddd():
#    func3 = 2
# 这不叫改变，这只是在局部创建一个同名的变量与其对应数值
#    func3 += 1 # 加减为改变
#    print(func3)
# ddd()

# 函数里面还有函数，使用可以不能改变
# 会在开辟两个局部名称空间
def func():
    count = 1
    print(count)
    def inner():
        # count += 1 这样改就会报错
        print(count)
    inner()
count = 3 # 优先取局部值，没有在全局，在没有内置
print(count) # 在全局直接调用，这时函数为运行或已结束所以直接调用全局值
func()